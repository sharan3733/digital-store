// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  Purchases     Purchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Product {
  id          String   @id @default(cuid())
  title       String
	description String?
  image       String?
  url         String?
  price       Decimal?
  free        Boolean  @default(false)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  author  User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  Purchases   Purchase[]
}

model Purchase {
  id        String   @id @default(cuid())
  amount    Decimal
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  sessionId String? 
  paid      Boolean  @default(false)
}
